package numberCreater;

public class Help {

}
/*
정렬 된 컬렉션 (시퀀스라고도 함). 7
이 인터페이스의 사용자는 목록에서 각 요소가 삽입되는 위치를 정확하게 제어 할 수 있습니다.
사용자는 정수 인덱스 (목록의 위치)로 요소에 액세스하고 목록에서 요소를 검색 할 수 있습니다.

집합과 달리 목록은 일반적으로 중복 요소를 허용합니다. 
보다 공식적으로 목록은 일반적으로 e1.equals (e2)와 같은 요소 e1과 e2의 쌍을 허용합니다.
null 요소를 허용하는 경우 일반적으로 multinull 요소를 허용합니다.
 누군가가 중복을 금지하는 목록을 구현하고 싶을 수도 있습니다.
사용자가 런타임 예외를 삽입하려고 할 때 런타임 예외가 발생하지만이 사용법은 드물 것으로 예상됩니다.

List 인터페이스는 Collection 인터페이스에 지정된 것 이외의 추가 규정을 반복자의 
계약, add, remove, equals 및 hashCode 메소드에 배치합니다.  
편의상 다른 상속 된 메소드에 대한 선언도 여기에 포함됩니다.

List 인터페이스는 목록 요소에 대한 위치 (인덱스) 액세스를위한 네 가지 방법을 제공합니다. 
Java 배열과 같은 목록은 0부터 시작합니다. 
이러한 작업은 일부 구현 (예 : LinkedList 클래스)의 인덱스 값에 비례하여 시간에 따라 실행될 수 있습니다.
따라서, 호출자가 구현을 모르는 경우 목록의 요소를 반복하는 것이 일반적으로이를 통해 색인화하는 것이 바람직합니다.

List 인터페이스는 ListIterator라는 특수 반복자를 제공하여 요소 삽입 및 교체와 양방향 액세스를 허용합니다.
Iterator 인터페이스가 제공하는 일반 작업 외에도 리스트의 지정된 위치에서 시작하는리스트 반복자를 얻는 방법이 제공됩니다.

List 인터페이스는 지정된 객체를 검색하는 두 가지 방법을 제공합니다. 성능 관점에서
이 방법들은주의해서 사용해야합니다. 많은 구현에서 비용이 많이 드는 선형 검색을 수행합니다.

List 인터페이스는 목록의 임의의 지점에서 여러 요소를 효율적으로 삽입하고 제거하는 두 가지 방법을 제공합니다.

참고 :리스트가 자신을 요소로 포함하는 것이 허용되지만 극도의주의가 필요합니다. 
equals 및 hashCode 메소드는 더 이상 해당리스트에서 잘 정의되지 않습니다.

일부 목록 구현에는 포함 할 수있는 요소에 제한이 있습니다. 예를 들어 일부 구현에서는 null 요소를 금지합니다.
일부는 요소 유형에 제한이 있습니다. 
부적합한 요소를 추가하려고하면 검사되지 않은 예외 (일반적으로 NullPointerException 또는 ClassCastException)가 발생합니다.
부적합한 요소의 존재를 조회하려고 시도하면 예외가 발생하거나 단순히 false를 리턴 할 수 있습니다. 
일부 구현은 전자의 동작을 나타내고 일부 구현은 전자의 동작을 나타냅니다.
보다 일반적으로, 자격이없는 요소를 목록에 삽입 할 수없는 자격이없는 요소에 대한 조작을 시도하면 예외가 발생하거나 성공할 수 있습니다.
이러한 인터페이스에 대한 사양에서 이러한 예외는 "선택 사항"으로 표시됩니다.

이 인터페이스는 Java Collections Framework의 멤버입니다.
*/
